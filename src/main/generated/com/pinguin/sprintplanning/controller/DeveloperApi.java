/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pinguin.sprintplanning.controller;

import com.pinguin.sprintplanning.model.DeveloperDto;
import com.pinguin.sprintplanning.model.DevelopersDto;
import com.pinguin.sprintplanning.model.ProblemDto;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "Developer", description = "the Developer API")
public interface DeveloperApi {

    default DeveloperApiDelegate getDelegate() {
        return new DeveloperApiDelegate() {};
    }

    @ApiOperation(value = "Add developer", nickname = "addDeveloper", notes = "Add developer", response = Object.class, tags={ "Developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Object.class) })
    @RequestMapping(value = "/developer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Object> addDeveloper(@ApiParam(value = "Developer object that needs to be added."  )  @Valid @RequestBody DeveloperDto developerDto) {
        return getDelegate().addDeveloper(developerDto);
    }


    @ApiOperation(value = "Delete developer", nickname = "deleteDeveloper", notes = "Delete developer", tags={ "Developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/developer/{developerId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteDeveloper(@ApiParam(value = "developer that you want to delete.",required=true) @PathVariable("developerId") UUID developerId) {
        return getDelegate().deleteDeveloper(developerId);
    }


    @ApiOperation(value = "Get All Developers", nickname = "getAllDevelopers", notes = "Get All Developers", response = DevelopersDto.class, tags={ "Developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DevelopersDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDto.class) })
    @RequestMapping(value = "/developer",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DevelopersDto> getAllDevelopers(@Min(1) @Max(2147483647) @ApiParam(value = "The page number of the records to retrieve. Default value is 1", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@Min(1) @Max(25) @ApiParam(value = "The max number of records to retrieve per page. Default value is 10, max value is 25.", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize) {
        return getDelegate().getAllDevelopers(pageNumber, pageSize);
    }


    @ApiOperation(value = "Get Developer by developer id", nickname = "getSpecificDeveloper", notes = "Get Developer by developer id", response = DeveloperDto.class, tags={ "Developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DeveloperDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDto.class) })
    @RequestMapping(value = "/developer/{developerId}",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DeveloperDto> getSpecificDeveloper(@ApiParam(value = "Get Specific Developer",required=true) @PathVariable("developerId") UUID developerId) {
        return getDelegate().getSpecificDeveloper(developerId);
    }


    @ApiOperation(value = "Update developer name", nickname = "updateDeveloper", notes = "Update developer", tags={ "Developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/developer/{developerId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateDeveloper(@ApiParam(value = "developer that you want to delete.",required=true) @PathVariable("developerId") UUID developerId,@ApiParam(value = "Developer object that needs to be Updated."  )  @Valid @RequestBody DeveloperDto developerDto) {
        return getDelegate().updateDeveloper(developerId, developerDto);
    }

}

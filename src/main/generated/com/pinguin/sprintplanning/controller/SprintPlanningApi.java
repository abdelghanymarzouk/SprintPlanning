/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pinguin.sprintplanning.controller;

import com.pinguin.sprintplanning.model.StoryDto;
import java.util.List;
import com.pinguin.sprintplanning.model.ProblemDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "SprintPlanning", description = "the SprintPlanning API")
public interface SprintPlanningApi {

    default SprintPlanningApiDelegate getDelegate() {
        return new SprintPlanningApiDelegate() {};
    }

    @ApiOperation(value = "Get Plan of stories", nickname = "plan", notes = "Get Plan of stories", response = List.class, responseContainer = "Map", tags={ "Sprint Planning", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = List.class, responseContainer = "Map"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDto.class) })
    @RequestMapping(value = "/plan",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Map<String, List<StoryDto>>> plan() {
        return getDelegate().plan();
    }

}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pinguin.sprintplanning.controller;

import com.pinguin.sprintplanning.model.BugDto;
import com.pinguin.sprintplanning.model.IssuesDto;
import com.pinguin.sprintplanning.model.ProblemDto;
import com.pinguin.sprintplanning.model.StoryDto;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "Issue", description = "the Issue API")
public interface IssueApi {

    default IssueApiDelegate getDelegate() {
        return new IssueApiDelegate() {};
    }

    @ApiOperation(value = "Add Bug", nickname = "addBug", notes = "Add Bug", response = Object.class, tags={ "Issue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Object.class) })
    @RequestMapping(value = "/bug",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Object> addBug(@ApiParam(value = "Bug object that needs to be added."  )  @Valid @RequestBody BugDto bugDto) {
        return getDelegate().addBug(bugDto);
    }


    @ApiOperation(value = "Add Story", nickname = "addStory", notes = "Add Story", response = Object.class, tags={ "Issue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Object.class) })
    @RequestMapping(value = "/story",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Object> addStory(@ApiParam(value = "Story object that needs to be added."  )  @Valid @RequestBody StoryDto storyDto) {
        return getDelegate().addStory(storyDto);
    }


    @ApiOperation(value = "Delete story/bug by issue id", nickname = "deleteIssue", notes = "Delete story/bug by issue id", tags={ "Issue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/deleteIssue/{issueId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteIssue(@ApiParam(value = "issue(story/bug) that you want to delete.",required=true) @PathVariable("issueId") UUID issueId) {
        return getDelegate().deleteIssue(issueId);
    }


    @ApiOperation(value = "Get All Issues (Bugs/Stories)", nickname = "getAllIssues", notes = "Get All Issues", response = IssuesDto.class, tags={ "Issue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IssuesDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDto.class) })
    @RequestMapping(value = "/getAllIssues",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<IssuesDto> getAllIssues(@Min(1) @Max(2147483647) @ApiParam(value = "The page number of the records to retrieve. Default value is 1", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@Min(1) @Max(25) @ApiParam(value = "The max number of records to retrieve per page. Default value is 10, max value is 25.", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize) {
        return getDelegate().getAllIssues(pageNumber, pageSize);
    }


    @ApiOperation(value = "Update Bug", nickname = "updateBug", notes = "Update Bug", tags={ "Issue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/bug/{issueId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateBug(@ApiParam(value = "issue(story/bug) that you want to delete.",required=true) @PathVariable("issueId") UUID issueId,@ApiParam(value = "Bug object that needs to be added."  )  @Valid @RequestBody BugDto bugDto) {
        return getDelegate().updateBug(issueId, bugDto);
    }


    @ApiOperation(value = "Update story", nickname = "updateStory", notes = "Update story", tags={ "Issue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/story/{issueId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateStory(@ApiParam(value = "issue(story/bug) that you want to delete.",required=true) @PathVariable("issueId") UUID issueId,@ApiParam(value = "Story object that needs to be updated."  )  @Valid @RequestBody StoryDto storyDto) {
        return getDelegate().updateStory(issueId, storyDto);
    }

}
